generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Image         Image[]
  Skill         Skill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Skill {
  id        String   @id @default(cuid())
  skillName String
  skillIcon Image?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Image {
  id        String  @id @default(cuid())
  public_id String
  url       String
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   String  @unique

  @@index([skillId])
  @@index([userId])
}
